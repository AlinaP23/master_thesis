-- For details on parameters, etc., please refer to the in-code annotations and comments. The following short
documentation provides basic, introductory information only. --

The python-based repository at hand provides the implementation of LRP, DropIn, Learn++.MF and Selective Retraining for
classification as well as regression tasks respectively. Imputation via mean, median and k-Nearest Neighbor is
implemented within file imputation.py.
Test runs to reproduce the results as presented within the master thesis can be conducted via the execution of test_run
and test_run_regression respectively. Within the "Parameter" section of these files (lines 14 -85), the parameter
settings for each of the algorithms can be customized. For learn_percentage_of_features, learn_no_of_weak_classifiers,
p_dropin_standard and sr_weight_threshold, multiple values can be defined. Under these circumstances, the corresponding
algorithm is trained for each of these configurations separately. Furthermore, to control which algorithms should be
executed, the Boolean values within array "algorithms_to_execute" can be changed accordingly.
New test datasets can be added within file "data_lib" or "data_lib_regression" by adding a further "elif" statement
within method "get_data_set". The template below illustrates the necessary steps:

if dataset == …:
…
elif dataset=="new_dataset_name":
	sensor_data=pd.read_csv('./storage_location_of_new_dataset',delimiter=",",header=None)

	# if required: insert preprocessing steps here

	X=sensor_data.iloc[:,1:].values # set X to new dataset's features
	Y=sensor_data.iloc[:,0].values  # set Y to new dataset's target values

	activation='logistic' # substitute with suitable activation function
	labels=[new_dataset_label_1, new_dataset_label_2, …, new_dataset_label_n]
	probabilities=np.random.random(len(X[0])) # substitute with realistic failure probabilities if available
…

Furthermore, the sensor failure simulation is implemented within these files.  Here, different modes may be executed:
Random single sensor failure, random multi-sensor failure or a simulation based on a known sensor failure probability
distribution. For the first two options, the user need to define additionally, whether the failure shall be simulated
completely randomly or whether each feature should miss the same pre-defined percentage of values.
